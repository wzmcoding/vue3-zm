/**
 * 补丁标志是由编译器生成的优化提示。
 * 当在差异比较过程中遇到具有 dynamicChildren 的块时，算法会进入"优化模式"。
 * 在这种模式下，我们知道 vdom 是由编译器生成的渲染函数产生的，
 * 所以算法只需要处理由这些补丁标志明确标记的更新。
 *
 * 补丁标志可以使用 | 位运算符组合，可以使用 & 运算符检查，例如：
 *
 * ```js
 * const flag = TEXT | CLASS * if (flag & TEXT) { ... }
 * ```
 * 查看 '../../runtime-core/src/renderer.ts' 中的 `patchElement` 函数，
 * 了解在差异比较过程中如何处理这些标志。
 */
export enum PatchFlags {
  /**
   * 表示具有动态文本内容的元素（子元素快速路径）
   */
  TEXT = 1,

  /**
   * 表示具有动态类绑定的元素。
   */
  CLASS = 1 << 1,

  /**
   * 表示具有动态样式的元素
   * 编译器将静态字符串样式预编译为静态对象
   * + 检测并提升内联静态对象
   * 例如：`style="color: red"` 和 `:style="{ color: 'red' }"` 都被提升为：
   * ```js
   * const style = { color: 'red' }   * render() { return e('div', { style }) }
   * ```
   */
  STYLE = 1 << 2,

  /**
   * 表示具有非类/样式的动态属性的元素。
   * 也可以用于具有任何动态属性的组件（包括类/样式）。
   * 当此标志存在时，vnode 还具有 dynamicProps 数组，
   * 包含可能更改的属性键，以便运行时可以更快地进行差异比较
   * （无需担心已删除的属性）
   */
  PROPS = 1 << 3,

  /**
   * 表示具有动态键属性的元素。当键发生变化时，总是需要完整的差异比较
   * 来删除旧键。此标志与 CLASS、STYLE 和 PROPS 互斥。
   */
  FULL_PROPS = 1 << 4,

  /**
   * 表示需要属性水合的元素
   * （但不一定需要补丁）
   * 例如：事件监听器和带有 prop 修饰符的 v-bind
   */
  NEED_HYDRATION = 1 << 5,

  /**
   * 表示子元素顺序不会改变的片段。
   */
  STABLE_FRAGMENT = 1 << 6,

  /**
   * 表示具有键控或部分键控子元素的片段
   */
  KEYED_FRAGMENT = 1 << 7,

  /**
   * 表示具有无键子元素的片段。
   */
  UNKEYED_FRAGMENT = 1 << 8,

  /**
   * 表示只需要非属性补丁的元素，例如 ref 或指令（onVnodeXXX 钩子）。
   * 由于每个补丁的 vnode 都会检查 ref 和 onVnodeXXX 钩子，
   * 它只是标记 vnode，以便父块会跟踪它。
   */
  NEED_PATCH = 1 << 9,

  /**
   * 表示具有动态插槽的组件（例如引用 v-for 迭代值的插槽，
   * 或动态插槽名称）。
   * 具有此标志的组件总是被强制更新。
   */
  DYNAMIC_SLOTS = 1 << 10,

  /**
   * 表示仅因为用户在模板的根级别放置了注释而创建的片段。
   * 这是一个仅开发环境的标志，因为注释在生产环境中会被剥离。
   */
  DEV_ROOT_FRAGMENT = 1 << 11,

  /**
   * 特殊标志 -------------------------------------------------------------
   * 特殊标志是负整数。它们永远不会使用位运算符进行匹配
   * （位运算匹配应该只在 patchFlag > 0 的分支中发生），
   * 并且是互斥的。检查特殊标志时，只需检查 patchFlag === FLAG。
   */

  /**   * 表示缓存的静态 vnode。这也是水合的提示，跳过整个子树，
   * 因为静态内容永远不需要更新。
   */
  CACHED = -1,
  /**
   * 一个特殊标志，表示差异比较算法应该退出优化模式。
   * 例如，在由 renderSlot() 创建的块片段上，
   * 当遇到非编译器生成的插槽时（即手动编写的渲染函数，
   * 应该始终完全差异比较）
   * 或者手动 cloneVNodes
   */
  BAIL = -2,
}
